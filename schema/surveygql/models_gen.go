// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package surveygql

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Answer struct {
	ID        string     `json:"id"`
	Question  *Question  `json:"question"`
	Text      *string    `json:"text,omitempty"`
	Rating    *int       `json:"rating,omitempty"`
	Boolean   *bool      `json:"boolean,omitempty"`
	Choices   []string   `json:"choices,omitempty"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type AnswerInput struct {
	QuestionID string   `json:"questionId"`
	Text       *string  `json:"text,omitempty"`
	Rating     *int     `json:"rating,omitempty"`
	Boolean    *bool    `json:"boolean,omitempty"`
	Choices    []string `json:"choices,omitempty"`
}

type CreateQuestionInput struct {
	Text     string       `json:"text"`
	Type     QuestionType `json:"type"`
	Choices  []string     `json:"choices,omitempty"`
	Required bool         `json:"required"`
}

type CreateSurveyInput struct {
	TemplateID string         `json:"templateId"`
	Answers    []*AnswerInput `json:"answers"`
}

type CreateTemplateInput struct {
	Name        string                 `json:"name"`
	Description *string                `json:"description,omitempty"`
	Tags        []string               `json:"tags,omitempty"`
	Questions   []*CreateQuestionInput `json:"questions"`
}

type Question struct {
	ID        string       `json:"id"`
	Text      string       `json:"text"`
	Type      QuestionType `json:"type"`
	Options   []string     `json:"options,omitempty"`
	Required  bool         `json:"required"`
	Template  *Template    `json:"template"`
	CreatedAt time.Time    `json:"createdAt"`
	UpdatedAt *time.Time   `json:"updatedAt,omitempty"`
}

type Template struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Tags        []string    `json:"tags,omitempty"`
	Questions   []*Question `json:"questions,omitempty"`
	CreatedAt   time.Time   `json:"createdAt"`
	UpdatedAt   *time.Time  `json:"updatedAt,omitempty"`
}

type UpdateTemplateInput struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description string                 `json:"description"`
	Tags        []string               `json:"tags"`
	Questions   []*CreateQuestionInput `json:"questions"`
}

type QuestionType string

const (
	QuestionTypeText           QuestionType = "TEXT"
	QuestionTypeRating         QuestionType = "RATING"
	QuestionTypeBoolean        QuestionType = "BOOLEAN"
	QuestionTypeMultipleChoice QuestionType = "MULTIPLE_CHOICE"
	QuestionTypeSingleChoice   QuestionType = "SINGLE_CHOICE"
)

var AllQuestionType = []QuestionType{
	QuestionTypeText,
	QuestionTypeRating,
	QuestionTypeBoolean,
	QuestionTypeMultipleChoice,
	QuestionTypeSingleChoice,
}

func (e QuestionType) IsValid() bool {
	switch e {
	case QuestionTypeText, QuestionTypeRating, QuestionTypeBoolean, QuestionTypeMultipleChoice, QuestionTypeSingleChoice:
		return true
	}
	return false
}

func (e QuestionType) String() string {
	return string(e)
}

func (e *QuestionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuestionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuestionType", str)
	}
	return nil
}

func (e QuestionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
